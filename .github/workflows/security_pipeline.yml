name: CI/CD Secure Coding & Code Scanning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security_scan:
    runs-on: ubuntu-latest

    steps:
      # --- 1. Setup and Install Stage ---
      - name: 1. Checkout repository
        uses: actions/checkout@v4

      - name: 2. Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 3. Install application and tool dependencies
        run: |
          cd Security_Compliance_workshop-Deepak-Srivastava/Day3
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit gunicorn semgrep

      # --- 2. SAST Stage (Static Analysis) ---
      - name: 4. Run Bandit Scan (Python SAST)
        id: bandit
        continue-on-error: true
        run: |
          echo "Running Bandit scan for Python security..."
          cd Security_Compliance_workshop-Deepak-Srivastava/Day3
          bandit -r . -o bandit-report.html -f html || true

      - name: 5. Run Semgrep Scan (Generic SAST)
        id: semgrep
        continue-on-error: true
        run: |
          echo "Running Semgrep scan..."
          cd Security_Compliance_workshop-Deepak-Srivastava/Day3
          semgrep --config auto --json --output=semgrep-report.json || true

      # --- 3. Secrets Stage (Gitleaks) ---
      - name: 6. Run Gitleaks Scan
        id: gitleaks
        continue-on-error: true
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --report-format json --report-path Security_Compliance_workshop-Deepak-Srivastava/Day3/gitleaks-report.json

      # --- 4. DAST Stage (Dynamic Analysis - ZAP Baseline) ---
      - name: 7. Start Flask Application (Background Server)
        id: app_start
        run: |
          echo "Starting application with Gunicorn on 127.0.0.1:5000..."
          cd Security_Compliance_workshop-Deepak-Srivastava/Day3
          gunicorn --bind 127.0.0.1:5000 main:app &
          echo $! > /tmp/gunicorn.pid
          echo "Waiting 5 seconds for app to be ready..."
          sleep 5

      - name: 8. Run OWASP ZAP Baseline Scan as root
        id: zap
        continue-on-error: true
        run: |
          docker run --rm -u 0 --network="host" \
          -v $PWD:/zap/wrk/:rw -w /zap/wrk/ \
          ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
          -t http://127.0.0.1:5000 \
          -r Security_Compliance_workshop-Deepak-Srivastava/Day3/zap-report.html

      - name: 9. Stop Flask Application
        if: always()
        run: |
          if [ -f /tmp/gunicorn.pid ]; then
            APP_PID=$(cat /tmp/gunicorn.pid)
            echo "Stopping application PID: $APP_PID"
            kill $APP_PID || true
          else
            echo "Gunicorn PID file not found. Application may not have started."
          fi

      # --- 5. Report Stage (Artifacts Upload) ---
      - name: 10. Upload Scan Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-reports
          path: |
            Security_Compliance_workshop-Deepak-Srivastava/Day3/bandit-report.html
            Security_Compliance_workshop-Deepak-Srivastava/Day3/semgrep-report.json
            Security_Compliance_workshop-Deepak-Srivastava/Day3/gitleaks-report.json
            Security_Compliance_workshop-Deepak-Srivastava/Day3/zap-report.html
          retention-days: 7

